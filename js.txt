                                             "Js"

Parsing: Now parsing is reading the code file and then storing the keywords like console,for,class and then understand
         what user wants.


    [Before the code run-time]     
               |
 {[code file]->parse->[syntax tree]}--->{[JIT(just in time)Conpiler]}--->{First it[byte code]->[machine code]}--->[Code Execution]  
  
   This is the execition cycle of the javascript code 
 
 Kaywords in above diagram:
 JIT compiler  first change the code in just byte code file and then compiler convert it into Machine code.


 Type of DataTypes:

 So there are basically 2 types:
    - Primitive   - String, Boolean, Number, null, undefined ,Symbol
    - Non Primitive - Object, Array, function 


    The array method Slice() :  is correct because it creates a shallow copy of a s
    pecified portion of an array without modifying the original array, aligning perfectly with the 
    question's requirement. This makes it a fundamental tool for working with arrays in programming, 
    reinforcing your understanding of array manipulation.

    --------------------------------------------------------------------------------------------------------------------

                                                   INTRODUCTION TO lOOPS:

All done within the files.


--------------------------------------------------------------------------------------------------------------

                                                         Function in Js:-

  
Now people say that arrow funtiion do not have "this" reference .

function fun (){
  console.log(this);
}
fun();
//This when runned on a browser console will give a something like windows object which mean that it gives a reference of browser .

//Same when arrow funtion is called on browser console also give same reference which mean that arrow fuction also have this reference//


===============================================================================================

Now                                    Higher order function / First class function

A function which take a function as a paramerter is called higher class/order function.

The best example for this is : forEach loop.

arrTeas.forEach((tea)=> {
          if(tea === "chai" || tea === "Chai"){
             return;
          }
          // Here you can check that a object arrTeas is calling a forEach function which has argument as a arrow function

-----------------------------------------------------------------------------------------------------------------

                                         Nesting of function:

function createTeaMaker (){
          return function (teaType){
               return `Making ${teaType}`
          }
   }
   let teaMaker = createTeaMaker(); // above as we are returning a funciton so this teaMaker has instance of that function so we can call that fucntion 
                                     // with help of teaMaker ex: teaMaker() this will envoke the function which is inside that createTeaMaker . Which is also returned by createTeaMaker.
   let printThisValue = teaMaker("Green sharbat")
   
   console.log(printThisValue); // Making Green Sharbat

  Now lets check wheather we can access the paramerter of parent funtion in inside function. ------------------------------------------------

  function createTeaMaker (name , order){
          return function (teaType){
               return `Making ${teaType} for ${name}. The order Number is ${order}` // Here this is example that inner function is accesing the parameter of parent function.
          }
   }
   let teaMaker = createTeaMaker("Sahil" , 33); // above as we are returning a funciton so this teaMaker has instance of that function so we can call that fucntion 
                                     // with help of teaMaker ex: teaMaker() this will envoke the function which is inside that createTeaMaker . Which is also returned by createTeaMaker.
   let printThisValue = teaMaker("Green sharbat")
  
   console.log(printThisValue);  // Output : Making Green Sharbat for Sahil. The order number is 33

=====================================================================================================================================
                // Array.prototype.map() :-

The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. 
The key benefits are:
Transformation: It transforms each element from the original array.

Immutability: It doesn't change the original array; instead, it returns a new array with transformed values.
Parameters

callbackFn:-

A function to execute for each element in the array. Its return value is added as a single element in the new array. 
The function is called with the following arguments:

element
The current element being processed in the array.

index
The index of the current element being processed in the array.

array
The array map() was called upon.

thisArg Optional
A value to use as this when executing callbackFn. See iterative methods.

Return value
A new array with each element being the result of the callback function.