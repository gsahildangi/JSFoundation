                                             "Js"

----------------------------------------------------------------------------------------------------------------------
                                        Part 1 to 5 : "Learn Js Foundation"
----------------------------------------------------------------------------------------------------------------------


Parsing: Now parsing is reading the code file and then storing the keywords like console,for,class and then understand
         what user wants.


    [Before the code run-time]     
               |
 {[code file]->parse->[syntax tree]}--->{[JIT(just in time)Conpiler]}--->{First it[byte code]->[machine code]}--->[Code Execution]  
  
   This is the execition cycle of the javascript code 
 
 Kaywords in above diagram:
 JIT compiler  first change the code in just byte code file and then compiler convert it into Machine code.


 Type of DataTypes:

 So there are basically 2 types:
    - Primitive   - String, Boolean, Number, null, undefined ,Symbol
    - Non Primitive - Object, Array, function 


    The array method Slice() :  is correct because it creates a shallow copy of a s
    pecified portion of an array without modifying the original array, aligning perfectly with the 
    question's requirement. This makes it a fundamental tool for working with arrays in programming, 
    reinforcing your understanding of array manipulation.

--------------------------------------------------------------------------------------------------------------------
                                                 INTRODUCTION TO lOOPS:

All done within the files.

--------------------------------------------------------------------------------------------------------------
                                                  Function in Js :-
  
Now people say that arrow funtiion do not have "this" reference .

function fun (){
  console.log(this);
}
fun();
//This when runned on a browser console will give a something like windows object which mean that it gives a reference of browser .

//Same when arrow funtion is called on browser console also give same reference which mean that arrow fuction also have this reference//


===============================================================================================

Now                                    Higher order function / First class function

A function which take a function as a paramerter is called higher class/order function.

The best example for this is : forEach loop.

arrTeas.forEach((tea)=> {
          if(tea === "chai" || tea === "Chai"){
             return;
          }
          // Here you can check that a object arrTeas is calling a forEach function which has argument as a arrow function

-----------------------------------------------------------------------------------------------------------------

                                         Nesting of function:

function createTeaMaker (){
          return function (teaType){
               return `Making ${teaType}`
          }
   }
   let teaMaker = createTeaMaker(); // above as we are returning a funciton so this teaMaker has instance of that function so we can call that fucntion 
                                     // with help of teaMaker ex: teaMaker() this will envoke the function which is inside that createTeaMaker . Which is also returned by createTeaMaker.
   let printThisValue = teaMaker("Green sharbat")
   
   console.log(printThisValue); // Making Green Sharbat

  Now lets check wheather we can access the paramerter of parent funtion in inside function. ------------------------------------------------

  function createTeaMaker (name , order){
          return function (teaType){
               return `Making ${teaType} for ${name}. The order Number is ${order}` // Here this is example that inner function is accesing the parameter of parent function.
          }
   }
   let teaMaker = createTeaMaker("Sahil" , 33); // above as we are returning a funciton so this teaMaker has instance of that function so we can call that fucntion 
                                     // with help of teaMaker ex: teaMaker() this will envoke the function which is inside that createTeaMaker . Which is also returned by createTeaMaker.
   let printThisValue = teaMaker("Green sharbat")
  
   console.log(printThisValue);  // Output : Making Green Sharbat for Sahil. The order number is 33

=====================================================================================================================================
                // Array.prototype.map() :-

The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. 
The key benefits are:
Transformation: It transforms each element from the original array.

Immutability: It doesn't change the original array; instead, it returns a new array with transformed values.
Parameters

callbackFn:-

A function to execute for each element in the array. Its return value is added as a single element in the new array. 
The function is called with the following arguments:

element
The current element being processed in the array.

index
The index of the current element being processed in the array.

array
The array map() was called upon.

thisArg Optional
A value to use as this when executing callbackFn. See iterative methods.

Return value
A new array with each element being the result of the callback function.

----------------------------------------------------------------------------------------------------------------------
                                                    Part6 (Javascript OOps)
----------------------------------------------------------------------------------------------------------------------
 
 JavaScript prototypes are like the behind-the-scenes wizards that enable powerful inheritance and 
 object behavior.

 function Animal(name) {
   this.name = name;
  }

    Animal.prototype.speak = function() {
    console.log(`${this.name} makes a noise.`);
  };

  const dog = new Animal('Buddy');
  dog.speak(); // Buddy makes a noise.
 

 /*
                                " Prof that js is prototype based."
let myArr = [1,2,3,4,5]
undefined
myArr
(5) [1, 2, 3, 4, 5]
0: 1
1: 2
2: 3
3: 4
4: 5
length: 5
[[Prototype]]: Array(0)
When we further click on this prototype the further functinality available for array will appear

[[Prototype]]: Array(0)
at: ƒ at()
concat : ƒ concat()
constructor : ƒ Array()
copyWithin : ƒ copyWithin()
entries : ƒ entries()
every : ƒ every()
fill : ƒ fill()
filter : ƒ filter()
find : ƒ find()
findIndex : ƒ findIndex()
findLast : ƒ findLast()
findLastIndex : ƒ findLastIndex()
flat : ƒ flat()
flatMap : ƒ flatMap()
forEach : ƒ forEach()
includes : ƒ includes()
indexOf : ƒ indexOf()
join : ƒ join()
keys : ƒ keys()
lastIndexOf : ƒ lastIndexOf()
length : 0
map: ƒ map()
pop : ƒ pop()
push : ƒ push()
reduce : ƒ reduce()
reduceRight : ƒ reduceRight()
reverse : ƒ reverse()
shift : ƒ shift()
slice : ƒ slice()
some : ƒ some()
sort : ƒ sort()
splice : ƒ splice()
toLocaleString : ƒ toLocaleString()
toReversed : ƒ toReversed()
toSorted : ƒ toSorted()
toSpliced : ƒ toSpliced()
toString : ƒ toString()
unshift : ƒ unshift()
values : ƒ values()
with : ƒ with()
Symbol( Symbol.iterator) : ƒ values()
Symbol(Symbol.unscopables): {at: true, copyWithin: true, entries: true, fill: true, find: true, …}
[[Prototype]] : Object ﻿
Further for oject we can check the functionality .
This is the prof that js use prototype.

                                      "Just read this is "PROTOTYPE" will be clear to you"
What Is a Prototype in JavaScript?
Every object in JavaScript has a hidden property called [[Prototype]] (commonly accessed as __proto__). This property points to another object, and that object is its prototype.
Think of it like a chain of knowledge:
If an object doesn’t know how to do something, it asks its prototype. If that prototype doesn’t know, it goes up its prototype chain—and so on—until it hits the end, which is null.

Why Is It Useful?
This system is what enables inheritance in JavaScript without classes (before ES6). It allows you to define properties and methods in one place and have many objects share that behavior.

Code Example
function Animal(name) {
  this.name = name;
}

Animal.prototype.speak = function() {
  return `${this.name} makes a noise.`;
};

const dog = new Animal("Doggo");
console.log(dog.speak()); // "Doggo makes a noise."


Here:
- dog is an instance of Animal
- It doesn’t have a speak() method directly
- But dog.__proto__ === Animal.prototype, so JS finds speak up the chain

Bonus: Prototype vs. __proto__ vs. Object.getPrototypeOf
- .prototype: Exists on constructor functions (like Animal)—used when creating new objects.
- __proto__: Actual internal link from one object to its prototype. Mostly for debugging.
- Object.getPrototypeOf(obj): Preferred and safe way to access the prototype.

*/ 

-----------------------------------------------------------------------------------------------------------------

                              "51.Functional constructor and Errors:- "

Previously as we studied that we can make a blueprint with the help of "class" however in js there is another
way and that is "constructor function" . Also as we have studied we can reuse the code written in function and similarly
a class can have multiple objecs and single blueprint can be used many places.


function Person ( name, age) {
   //let myName = name ; // Now initialy we are only using the parameter value now we want to save it in a variable.
    // Now this above one is also a valid way however in construtor functon we use it like this.name = name.
    //** Also when we intialize a new varible then we also have to return it as it act as a funtion in that case. 
    this.name = name;   // when using this.name then it act as a constructor function. 
    this.age = age; 
}
//now this new keyword is conecte to this keyword so it can access the value without returning it.
let myCafe  = new Person("Sahil" , 33); Now this is using it as a constructor fuction as we are using new keywod.
console.log(myCafe) ; Output : Peron {name : 'Sahil' , age : 33}

// *** Now lets check this and lets not use the this.name in the defination and make it a simple fuction.
fucntion Person1 (name , age){
    let myName = name;
    let myAge = age;   // as this a normal funciton we can not acces it values directly so we have to return this and then catch it.
}
    
                                         Contructor fucntion VS Prototype.

function Person ( name, age) {
   //let myName = name ; // Now initialy we are only using the parameter value now we want to save it in a variable.
    // Now this above one is also a valid way however in construtor functon we use it like this.name = name.
    //** Also when we intialize a new varible then we also have to return it as it act as a funtion in that case. 
    this.name = name;   // when using this.name then it act as a constructor function. 
    this.age = age; 
}

function Car (make , model) {
    this.make = make;
    this.model = model;
}

let myFirstCar = new Car("Skoda" , "Octavia");
let myNewCar = new Car ("BMW" ,"M3" )

// console.log(myFirstCar);
// console.log(myNewCar);
// console.log(typeof myFirstCar);
// console.log(typeof myNewCar);

function Tea (type) {
    this.type = type;
    this.describe =  function () {
        return `This is a ${type} tea.`;
    }
}
let myTea = new Tea("lemon")
// console.log(myTea.describe());

//                            cosntructor function VS Prototype

function Animal (species , makeSound) {
    this.species = species;
    // this.makeSound = makeSound;
    
}

Animal.prototype.sound = function (makeSound){
     return `${this.species} make ${makeSound} sound`        
}  

let dog = new Animal("Dog" ,"Barking");
// console.log(dog);
// console.log(dog.sound("roar"));// this will work when we pass the sound in sound function 


function Drink (name){
     if(!new.target){
         throw new Error("Drink should be called using new keyword");
     }
    this.name = name;
    console.log(`This is ${this.name}`);
    
}

let tea = new Drink("Coffee");

-----------------------------------------------------------------------------------------------------------------

                                    "Classes Objects and inheritance in js"

  
    Inheritance  is just inheriting the methods and data from the parent class. 

    //                   Encapsulation                             

    
//                           "Encapsulation"
// Encapsulation is a fundamental concept in object - oriented programming(OOP) that refers to the bundling
//  of data(variables) and methods(functions) that operate on that data into a single unit, typically a 
//  class. It also involves restricting direct access to some of an object's components, which is a way 
//  of enforcing data hiding.
// Data is accessed or modified—usually through well-defined interfaces like getters and setters.
// In encaspsulation we restrict the direct access of object data.

//To do this in features/variable we use "#" in front of that variable.

class BankBalance {
    #ifscCOde = 'IPDPS7214' //now this feature or variable can not be directly used to use this we have
    //to make a custom method.
    #balance = 0;

    deposit(amount) {
        this.#balance = this.#balance + amount;
        return this.#balance;
    }

    getBalance() {
        return `$ ${this.#balance}`
    }
}

let myBalance = new BankBalance();
// console.log(myBalance.getBalance());//as we have not set any amount now first lets deposite some amount in it
myBalance.deposit(1000000003333);
// console.log(myBalance.getBalance());

//                                        Abstraction

 Abstraction
// Abstraction in object-oriented programming is all about showing only the relevant details to the user
// while hiding the complex inner workings behind the scenes. It's like driving a car: you know how to 
// steer, brake, and accelerate—but you don’t need to understand how the engine works to get from point A to B.

// In programming terms, abstraction lets you define what an object does without necessarily describing how
//  it does it. This is typically achieved through abstract classes and interfaces.

****** (Very Important)
// Here’s a simple way to put it:

// - Encapsulation hides the data.

// - Abstraction hides the complexity.

//                                        Static method


/*
In JavaScript, a static method is a function that belongs to the class itself, rather than to any 
specific instance of that class. Static methods are called directly on the class name and do not require
 creating an object (instance) of the class.

Key characteristics of static methods:
Called on the Class: They are invoked using the class name, not an object instance.

No this context (for instance properties): Inside a static method, this refers to the class constructor 
itself, not an instance of the class. Therefore, you cannot directly access instance properties or 
methods using this within a static method.

Utility functions: They are commonly used for utility functions, helper methods, or factory methods t
hat perform operations related to the class as a whole, rather than specific object data.
*/ 

// Some coding problems are one with file 

// Opps_challanges.js

--------------------------------------------------------------------------------------------------------------
                        Part7 (DOM and BOM - JavaScript in Browser)
--------------------------------------------------------------------------------------------------------------
 
DOM and BOM in JavaScript
Document Object Model (DOM)
The Document Object Model represents the structure of an HTML or XML document as a tree of objects. 
Each node in the tree corresponds to elements, attributes, text, comments, and other parts of the 
document. Scripts can traverse, modify, add, or remove nodes, letting you update the page dynamically 
without a full reload.

Key features:

Access elements via methods like getElementById, querySelector, or by traversing parentNode/childNodes.

Manipulate content with properties like innerHTML, textContent, and attributes via setAttribute.

Respond to user interactions by attaching event listeners (e.g., click, input, scroll).

Browser Object Model (BOM)
The Browser Object Model exposes the browser’s environment and provides interfaces to interact with it 
outside of the document. It is not standardized like the DOM, but most modern browsers implement similar 
objects under the global window object.

Common BOM interfaces:

window: top-level object containing global functions, timers, and references to other BOM objects.

navigator: information about the browser and operating system.

location: current URL and methods to change or reload it.

history: navigation history stack manipulation.

screen: details about the user’s display.

Comparing DOM vs BOM
Aspect	DOM	BOM
Definition	Structured representation of document -	Interfaces to browser features beyond the document
Standardization	W3C specification -	De facto implementation, no single formal standard

Primary Object	document	window
Use Cases-	Reading/updating content and layout	Controlling browser navigation, dialogs, screen info
Examples-	document.querySelector, createElement	window.alert, history.pushState, navigator.userAgent

JavaScript in the Browser
JavaScript running in a browser is executed by an engine (e.g., V8, SpiderMonkey) embedded in the browser.
This environment ties together the DOM, BOM, and JavaScript language core, creating a single runtime
context.

Core execution model:

Global execution context initializes window as the global object.

Code is parsed into an Abstract Syntax Tree, then compiled or interpreted.

Event loop handles callbacks, timers, network responses, and user events.

Call stack processes synchronization, while microtasks (Promises) run between event loop ticks.

Interaction points:

Script tags (<script>) can appear in HTML head or body.

defer and async attributes control parsing and execution timing.

Inline handlers (e.g., onclick) attach directly to DOM elements.

Page Load and Event Lifecycle
The browser goes through phases when loading a page:

Parsing HTML: Builds the DOM tree.

Fetching external resources: CSS, scripts, images.

DOMContentLoaded event fires when initial HTML is parsed and DOM is built.

Load event fires after all resources (images, subframes) finish loading.

You can hook into these phases to run scripts at the optimal time:

document.addEventListener('DOMContentLoaded', callback)

window.addEventListener('load', callback)

Further Insights
Consider exploring:

How modern APIs (Fetch, Service Workers, WebSockets) extend the BOM.

Performance optimizations: debouncing, throttling, requestAnimationFrame.

Debugging tools: breakpoints in DevTools, network throttling, performance profiles.

Security boundaries: same-origin policy, CORS, content security policy.

Keeping these concepts in mind will clarify how browser environments work and how JavaScript 
orchestrates dynamic, interactive web experiences.

 This is window object of browser       Browser
      Window -----------------> -----------
           |                     |  chrome |
           |                     |         |
           |                     -----------
           |----------------------------------
           |                     |           | 
           DOM                  BOM        JavaScript - here you write your - Objects , array, functions
            |                     |
       All the Elements        navigator
                               screen 
                               location

    //These are also called web api's                           
 //Now to work with window objects go to the browser console
   Window.outerWidth
   1167

navigator.userAgent   - this has alot of properties do check on mdn
 give browser info that we can use in the code

location.host
//give you the ip address.

location.href
//give the full location.

//DOM element are nothing but head body and these element we use on our webpage.
 we can manipulate them with document.getElementById("h1") like this.

======================================================================================================
                                Part8/
                                DOM Manupulation
======================================================================================================
                DOM Manipulation.
               
               Divided into these two parts.

get the Element                         Event Listening           

//  Most of the notes in code files Part8

HTML - MarkUp language
DOM - Processed element of HTML in document tree in memory




/*    DOM final 5 Challenges ----------------------Notes on form and preventDefault()
                   
Why the event disappears quickly without event.preventDefault()
When a form is submitted in HTML, the default behavior of the browser is to:

Send the form data to a server (if action is defined),

Or, if there's no action, reload the page.

This automatic page reload happens almost instantly, which interrupts your script.

So even though console.log(event) is called, the log gets wiped out with the refresh — it’s like trying to read a message while the screen vanishes.

✅ What event.preventDefault() actually does
By calling event.preventDefault(), you're telling the browser:

This stops the page from reloading, giving your script time to fully execute.

Now, console.log(event) stays visible in the dev tools, and you can handle the data however you like — validate it, display it, store it, dance with it 🕺.

🚀 What you can do next
If you want to display the feedback entered, try something like this:

javascript
document.getElementById('feedbackForm').addEventListener('submit', function(event){
    event.preventDefault(); // Stops page refresh
    const input = document.getElementById('feedbackInput').value;
    document.getElementById('feedbackDisplay').textContent = `Thanks! You said: ${input}`;
});
*/



/*                                Form Actions

Form actions are a key part of HTML forms — they define what happens when a user submits the form.

⚙️ What exactly is the action attribute?
The action attribute of a <form> tag tells the browser where to send the form data.

It typically contains a URL to a server-side script (like PHP, Node.js, etc.) that processes the data.

html
<form action="https://example.com/submit-form" method="POST">
In this example:

When the user submits the form, the browser sends the form data to https://example.com/submit-form.

The server can then store, validate, or respond to the form data however you program it to.

🛠 Common use cases
Purpose	Example Action
Submit to a backend server	/api/feedback or submit.php
Submit to an external URL	https://forms.example.com/submit
Handle with JavaScript	Leave it empty or use # (and JS handles it)
🌐 If you leave out action...
The form submits to the current page's URL by default.

Handy when you want to process the form using JavaScript instead — like you're doing in your example!
*/


--------------------------------------------------------------------------------------------------------------
                        Part9 - Advance JavaScript    - Most of the notes in the files itself
--------------------------------------------------------------------------------------------------------------
Usually javascript follow a syncronous approach as once after other line is compiled in sequence.
Now there are some cases in which we want to javascript behave as Asyncronous .
Some example in which we need Asyncronous behavior of js.
- fetching a database
- waiting for user input 
- network call
- read/write in memory
- time functions

Asyncronous Behaviour of Javascript with a code in which we will use time function.

console.log("hello from console log side");
//Now here we want to use a time fuction in between these two code till now js is following a syncronous 
till we
//use setTimeout now we have observed a different behaviour in which all code is compiled first and then
// after a particular time that we provided in the last it execute .
// Now problem in this is that we have write it in between for loop and function.so why it came in last?

//Ans to this using Ai.
->
JavaScript is single-threaded, meaning it executes code line-by-line in a synchronous manner.

When it hits setTimeout, it doesn't immediately run the function inside. Instead:

It schedules bubbleDemo() to be executed after at least 5000ms.

The scheduling is handled by the Web APIs, and the callback is pushed to the task queue.

Only after the main synchronous code (your for loop, etc.) finishes, the event loop checks the task 
queue and runs any pending functions.

function bubbleDemo() {
    console.log("Hello from bubbleDemo funciton using settimeout");
    
}

setTimeout(()=>{
    bubbleDemo()
},5000);


for (let index = 0; index < 15; index++) {
     console.log(index);
         
}

------------------------------------------------------------------------------------------------------------
                                      Closure in javascript

//Closures are one of the most powerful and subtle features in JavaScript. They let functions remember 
//and access variables from their outer scope, even after that scope has finished executing.

A closure happens when:

-A function is defined inside another function, and
-The inner function uses variables from the outer function,
-Even after the outer function has returned!

function createCounter() {
    let count = 0; // this variable lives in the outer scope

    return function() {
        count++; // the inner function remembers "count"
        console.log(count);
    };
}

const counter = createCounter(); // outer function runs once
counter(); // prints 1
counter(); // prints 2
//Even though createCounter() has finished running, the returned function still remembers count.